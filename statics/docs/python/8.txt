def is_valid(board, row, col, num):
    def is_present_in_row(row, num):
        return num in board[row]

    def is_present_in_column(col, num):
        return num in [board[i][col] for i in range(9)]

    def is_present_in_box(row, col, num):
        start_row, start_col = 3 * (row // 3), 3 * (col // 3)
        return any(num == board[i][j] for i in range(start_row, start_row + 3) for j in range(start_col, start_col + 3))

    return not is_present_in_row(row, num) and not is_present_in_column(col, num) and not is_present_in_box(row, col, num)

def find_empty_cell(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return i, j
    return None

def sudoku_solver(board):
    empty_cell = find_empty_cell(board)
    if not empty_cell:
        return True

    row, col = empty_cell
    for num in range(1, 10):
        if is_valid(board, row, col, num):
            board[row][col] = num
            if sudoku_solver(board):
                return True
            board[row][col] = 0

    return False

# Example Sudoku Board
sudoku_board = [[5, 3, 0, 0, 7, 0, 0, 0, 0],
                [6, 0, 0, 1, 9, 5, 0, 0, 0],
                [0, 9, 8, 0, 0, 0, 0, 6, 0],
                [8, 0, 0, 0, 6, 0, 0, 0, 3],
                [4, 0, 0, 8, 0, 3, 0, 0, 1],
                [7, 0, 0, 0, 2, 0, 0, 0, 6],
                [0, 6, 0, 0, 0, 0, 2, 8, 0],
                [0, 0, 0, 4, 1, 9, 0, 0, 5],
                [0, 0, 0, 0, 8, 0, 0, 7, 9
